'use strict';

var CmdParser = require('cmdparser');
var cmdparser;
var losslessJSON = require('lossless-json');
var simpleObjRE = /^\s*[{\[]/;

function loadTree () {
  $.get('apiv2/connection', function (isConnected) {
    if (isConnected) {
      $('#keyTree').on('loaded.jstree', function () {
        var tree = getKeyTree();
        if (tree) {
          var root = tree.get_container().children('ul:eq(0)').children('li');
          tree.open_node(root, null, true);
        }
      });
      $.get('connections', function (data) {
        var json_dataData = [];

        if (data.connections) {
          data.connections.every(function (instance) {
            // build root objects for jstree view on left side
            var treeObj = {
              id: instance.conId,
              text: instance.label + ' (' + instance.options.host + ':' + instance.options.port + ':' + instance.options.db + ')',
              state: {opened: false},
              icon: getIconForType('root'),
              children: true,
              rel: 'root'
            };
            json_dataData.push(treeObj);
            return true;
         });
        }
        return onJSTreeDataComplete();

        function getJsTreeData(node, cb) {
          if (node.id === '#') return cb(json_dataData);

          var dataUrl;
          if (node.parent === '#') {
              dataUrl = 'apiv2/keystree/' + encodeURIComponent(node.id) + '/';
          }
          else {
              var root = getRootConnection(node);
              var path = getFullKeyPath(node);
              dataUrl = 'apiv2/keystree/' + encodeURIComponent(root) + '/' + encodeURIComponent(path) + '?absolute=false';
          }
          $.get({
              url: dataUrl,
              dataType: 'json'
          }).done(function(nodeData) {
            if (Array.isArray(nodeData.data)) {
              nodeData.data.forEach(function(elem) {
                 if (elem.rel) elem.icon = getIconForType(elem.rel);
              });
            }
            cb(nodeData.data)
          }).fail(function(error) {
            console.log('Error fetching data for node ' + node.id + ': ' + JSON.stringify(error));
            if (error.responseJSON && error.responseJSON.connectionClosed) {
              setRootConnectionNetworkError(true, node)
            }
            cb('Error fetching data');
          });
        }

        function getIconForType(type) {
          switch (type) {
              case 'root': return 'images/treeRoot.png';
              case 'string': return 'images/treeString.png';
              case 'hash': return 'images/treeHash.png';
              case 'set': return 'images/treeSet.png';
              case 'list': return 'images/treeList.png';
              case 'zset': return 'images/treeZSet.png';
              case 'stream': return 'images/treeStream.png';
              case 'binary': return 'images/treeBinary.png';
              case 'ReJSON-RL': return 'images/treeJson.png';
              default: return null;
          }
        }

        function onJSTreeDataComplete () {
          $('#keyTree').jstree({
              core: {
                  data: getJsTreeData,
                  multiple : false,
                  check_callback : true,
                  //themes: {
                  //    responsive: true
                  //}
              },
              contextmenu: {
                  items: function (node) {
                      var menu = {
                          'renameKey': {
                            icon: './images/icon-edit.png',
                            label: 'Rename Key',
                            action: renameKey
                          },
                          'addKey': {
                            icon: './images/icon-plus.png',
                            label: 'Add Key',
                            action: addKey
                          },
                          'refresh': {
                            icon: './images/icon-refresh.png',
                            label: 'Refresh',
                            action: function (obj) {
                                jQuery.jstree.reference('#keyTree').refresh(obj);
                            }
                          },
                          'export': {
                            icon: './images/icon-download.png',
                            label: 'Export Keys',
                            action: exportKey
                          },
                          'remKey': {
                            icon: './images/icon-trash.png',
                            label: 'Remove Key',
                            action: deleteKey
                          },
                          'remConnection': {
                            icon: './images/icon-trash.png',
                            label: 'Disconnect',
                            action: removeServer
                          }
                      };
                      var rel = node.original.rel;
                      if (typeof rel === 'undefined' ) {    // folder
                        delete menu['renameKey'];
                      }
                      if (typeof rel !== 'undefined' && rel !== 'root') {  // some redis key
                        delete menu['addKey'];
                      }
                      if (rel !== 'root') {
                        delete menu['remConnection'];
                      }
                      if (rel === 'root') {     // root connection object (first level in tree-view)
                        delete menu['renameKey'];
                        delete menu['remKey'];
                      }
                      if (redisReadOnly) {
                        delete menu['renameKey'];
                        delete menu['addKey'];
                        delete menu['remKey'];
                      }
                      return menu;
                  }
              },
              plugins: [ 'themes', 'contextmenu' ]
          })
          .on('select_node.jstree', treeNodeSelected)
          .delegate('a', 'click', function (event, data2) {
            event.preventDefault();
          })
          .on('keyup', function (e) {
              var key = e.which;
              // delete
              if (key === 46) {
                  var node = getKeyTree().get_selected(true)[0];
                  // do not allow deletion of entire server, only keys within
                  if (node.parent !== '#') {
                    var connId = node.parents[node.parents.length-2];
                    deleteKey(connId, getFullKeyPath(node));
                  }
              }
          });

        }
      });
    }
  });
}

function treeNodeSelected (event, data) {
  $('#body').html('Loading...');
  var connectionId;
  if (data.node.parent === '#') {
    connectionId = data.node.id;
    $.get('apiv2/server/' + connectionId + '/info')
        .done(function (infoData, status) {
          if (status !== 'success') {
            return alert('Could not load server info');
          }
          if (typeof infoData === 'string') infoData = JSON.parse(infoData);
          infoData.data.some(function (instance) {
            if (instance.connectionId === connectionId) {
              if (!instance.disabled) {
                setRootConnectionNetworkError(false, data.node);
                renderEjs('templates/serverInfo.ejs', instance, $('#body'), setupAddKeyButton);
              }
              else {
                setRootConnectionNetworkError(true, data.node);
                var html = '<h5>ERROR: ' + (instance.error ? instance.error : 'Server not available - cannot query status information.') + '</h5>';
                $('#body').html(html);
                setupAddKeyButton();
              }
              return true;
            }
            return false;
          });
        })
        .fail(function (error) {
          if (error.responseJSON) {
            if (error.responseJSON.message) {
              $('#body').html('<h5>Got ERROR: ' + error.responseJSON + '</h5>');
            }
            else {
              $('#body').html('<h5>Network ERROR calling server...</h5>');
            }
            if (error.responseJSON.connectionClosed) setRootConnectionNetworkError(true, data.node);
          }
        });
  } else {
    connectionId = getRootConnection(data.node);
    var path = getFullKeyPath(data.node);
    return loadKey(connectionId, path);
  }
}

/** finds root entry with connection object of the node given and changes icon to show disconnect state
 *
 *  @param hasError flag to indicate a connection problem on a tree node
 *  @param node JSTree node the error occurred to get first sibling from tree root
 */
function setRootConnectionNetworkError (hasError, node) {
  var tree = getKeyTree();
  var root = getRootConnection(node);
  var rootNode = tree.get_node(root);
  if (hasError) tree.set_icon(rootNode, 'images/treeRootDisconnect.png');
  else if (tree.get_icon(rootNode) === 'images/treeRootDisconnect.png') {
    // only set icon if not already set to minimize redraws here...
    tree.set_icon(rootNode, 'images/treeRoot.png');
  }
}


function getFullKeyPath (node) {
  if (node.parent === '#') {
      return '';
  }
  return node.id.substr(getRootConnection(node).length + 1);
}

function getRootConnection (node) {
  if (node.parent === '#') {
      return node.id;
  }
  return node.parents[node.parents.length-2];
}

function loadKey (connectionId, key, index) {
  if (index) {
    $.get('apiv2/key/' + encodeURIComponent(connectionId) + '/' + encodeURIComponent(key) + '?index=' + index)
        .done(processData)
        .fail(errorHandler);
  } else {
    $.get('apiv2/key/' + encodeURIComponent(connectionId) + '/' + encodeURIComponent(key))
        .done(processData)
        .fail(errorHandler)
  }

  function processData (keyData, status) {
    if (status !== 'success') {
      return alert('Could not load key data');
    }

    setRootConnectionNetworkError(false, getKeyTree().get_selected(true)[0]);
    if (typeof keyData === 'string') keyData = JSON.parse(keyData);
    keyData.connectionId = connectionId;
    console.log('rendering type ' + keyData.type);
    switch (keyData.type) {
      case 'string':
        selectTreeNodeString(keyData);
        break;
      case 'hash':
        selectTreeNodeHash(keyData);
        break;
      case 'set':
        selectTreeNodeSet(keyData);
        break;
      case 'list':
        selectTreeNodeList(keyData);
        break;
      case 'zset':
        selectTreeNodeZSet(keyData);
        break;
      case 'stream':
        selectTreeNodeStream(keyData);
        break;
      case 'binary':
        selectTreeNodeBinary(keyData);
        break;
      case 'ReJSON-RL':
        selectTreeNodeReJSON(keyData);
        break;
      case 'none':
        selectTreeNodeBranch(keyData);
        break;
      default:
        var html = JSON.stringify(keyData);
        $('#body').html(html);
        resizeApp();
        break;
    }
  }

  function errorHandler(error) {
    if (error.responseJSON) {
      if (error.responseJSON.message) {
        $('#body').html('<h5>Got ERROR: ' + error.responseJSON.message + '</h5>');
      }
      else {
        $('#body').html('<h5>Network ERROR calling server...</h5>');
      }
      if (error.responseJSON.connectionClosed) setRootConnectionNetworkError(true, getKeyTree().get_selected(true)[0]);
    }
  }
}

function selectTreeNodeBranch (data) {
  renderEjs('templates/editBranch.ejs', data, $('#body'));
}

function setupEditDataModals(idForm, idSaveBtn) {
  $('#' + idForm).off('submit').on('submit', function(event) {
    console.log('saving');
    event.preventDefault();
    var editForm = $(event.target);
    var editModal = editForm.closest('.modal');
    editModal.find('#' + idSaveBtn).button('loading');

    $.post(editForm.attr('action'), editForm.serialize()
    ).done(function (data, status) {
      console.log('saved', arguments);
    })
    .fail(function (err) {
      console.log('save error', arguments);
      alert('Could not save "' + err.statusText + '"');
    })
    .always(function () {
      setTimeout(function () {
        refreshTree();
        getKeyTree().select_node(0);
        editModal.find('#' + idSaveBtn).button('reset');
        editModal.modal('hide');
      }, 500);
    });
  });
}

function setupJsonInputValidator(idJsonCheckbox, idInput) {
  var chkBox = $('#' + idJsonCheckbox);
  chkBox.on('change', function(element) {
    if (element.target.checked) addInputValidator(idInput, 'json');
    else removeInputValidator(idInput);
  });
  chkBox.closest('.modal').on('hidden', function() {
    removeInputValidator(idInput);
    chkBox.prop('checked', false);
  })
}

function registerModalFocus(idModal, idInput) {
  var modal = $('#' + idModal);
  modal.on('shown', function () {
    modal.find('#' + idInput).trigger('focus')
  });
}

function setupAddServerForm() {
  var serverModal = $('#addServerModal');

  // register add server form as ajax form to send bearer token too
  $('#addServerForm').off('submit').on('submit', function (event) {
    console.log('try connection to new redis server');
    event.preventDefault();
    $('#addServerBtn').prop('disabled', true).html('<i class="icon-refresh"></i> Saving');
    var form = $(event.target);
    $.post(form.attr('action'), form.serialize())
        .done(function () {
          if (arguments[0] && arguments[0].ok) {
            console.log('Connect successful');
            setTimeout(function() {
              $(window).off('beforeunload', 'clearStorage');
              location.reload();
            }, 500);
          }
          else {
            addServerError(arguments[0] ? arguments[0].message : 'Server error processing request');
          }
        })
        .fail(function (err) {
          console.log('connect error: ', arguments);
          addServerError(err.statusText);
        })
        .always(function() {
          $('#addServerBtn').prop('disabled', false).text('Connect...');
        })
  });

  function addServerError(errMsg) {
    alert('Could not connect to redis server "' + errMsg + '"');
    serverModal.modal('hide');
  }

  // prepare all input elements
  serverModal.find('#addServerGroupSentinel').hide();
  serverModal.find('#serverType').on('change', function () {
    if ($(this).val() === 'redis') {
      serverModal.find('#addServerGroupRedis').show();
      serverModal.find('#addServerGroupSentinel').hide();
    } else {
      serverModal.find('#addServerGroupRedis').hide();
      serverModal.find('#addServerGroupSentinel').show();
    }
  });
  serverModal.find('input:radio[name=sentinelPWType]').on('change', function() {
    if ($(this).val() === 'sentinel') {
      serverModal.find('#sentinelPassword').prop('disabled', false)
        .prev('label').removeClass('muted');
    }
    else {
      serverModal.find('#sentinelPassword').prop('disabled', true)
        .prev('label').addClass('muted');
    }
  });
  serverModal.find('#label').trigger('focus');
}

function setupAddKeyButton (connectionId) {
  var newKeyModal = $('#addKeyModal');
  newKeyModal.find('#newStringValue').val('');
  newKeyModal.find('#newFieldName').val('');
  newKeyModal.find('#keyScore').val('');
  newKeyModal.find('#addKeyConnectionId').val(connectionId);
  newKeyModal.find('#addKeyValueIsJson').prop('checked', false);
  newKeyModal.find('#addKeyFieldIsJson').prop('checked', false);
  newKeyModal.find('#keyType').on('change', function () {
    var score = newKeyModal.find('#scoreWrap');
    if ($(this).val() === 'zset') {
      score.show();
    } else {
      score.hide();
    }
    var field = newKeyModal.find('#fieldWrap');
    if ($(this).val() === 'hash') {
      field.show();
    } else {
      field.hide();
    }
    var fieldValue = newKeyModal.find('#fieldValueWrap');
    var timestamp = newKeyModal.find('#timestampWrap');
    if ($(this).val() === 'stream') {
      fieldValue.show();
      timestamp.show();
    } else {
      fieldValue.hide();
      timestamp.hide();
    }
  });
}

function addNewKey() {
  var newKeyModal = $('#addKeyModal');
  var newKey = newKeyModal.find('#keyValue').val();
  var connectionId = newKeyModal.find('#addKeyConnectionId').val();
  var action = 'apiv2/key/' + encodeURIComponent(connectionId) + '/' + encodeURIComponent(newKey);
  console.log('saving new key ' + newKey);
  newKeyModal.find('#saveKeyButton').attr('disabled', 'disabled').html('<i class="icon-refresh"></i> Saving');

  $.ajax({
    url: action,
    method: 'POST',
    data: newKeyModal.find('#addKeyForm').serialize()
  }).done(function() {
    console.log('saved new key ' + newKey + ' at ' + connectionId);
  }).fail(function(jqXHR, textStatus, errorThrown) {
    console.log('save error for key ' + newKey + ': ' + textStatus);
    alert('Could not save "' + errorThrown.statusText + '"');
  }).always(function() {
    setTimeout(function () {
      newKeyModal.find('#saveKeyButton').prop('disabled', false).html('Save');
      refreshTree();
      newKeyModal.modal('hide');
    }, 500);
  });
}


function renameExistingKey() {
  var modal = $('#renameKeyModal');
  var oldKey = modal.find('#currentKeyName').val();
  var newKey = modal.find('#renamedKeyName').val();
  var connectionId = modal.find('#renameKeyConnectionId').val();
  var action = 'apiv2/key/' + encodeURIComponent(connectionId) + '/' + encodeURIComponent(oldKey);
  console.log('renaming ' + oldKey + ' to new key ' + newKey);
  modal.find('#renameKeyButton').attr('disabled', 'disabled').html('<i class="icon-refresh"></i> Saving');

  $.ajax({
    url: action,
    method: 'POST',
    data: {key: newKey, force: modal.find('#forceRenameKey').is(':checked'), action: 'patch'}
  }).done(function() {
    console.log('renamed old key ' + newKey + ' at ' + connectionId);
  }).fail(function(jqXHR, textStatus, errorThrown) {
    console.log('rename error for key ' + oldKey + ': ' + textStatus);
    alert('Could not rename "' + errorThrown + '" (HTTP ' + jqXHR.status + ')');
  }).always(function(data, textStatus) {
    // close modal for most return values incl. success
    // but stay open if error message returned (key exists without overwrite)
    if (textStatus === 'success' && data.error && data.error.code === 'ERR_KEY_EXISTS') {
      modal.find('#renamedKeyName').after('<span class="text-error">' + data.error.title + '</span>')
        .closest('.control-group').addClass('error');
    }
    else {
      setTimeout(function() {
        refreshTree();
        modal.modal('hide');
      }, 500);
    }
    modal.find('#renameKeyButton').prop('disabled', false).html('Save');
  });
}


function selectTreeNodeString (data) {
  renderEjs('templates/editString.ejs', data, $('#body'), function() {
    var isJsonParsed = false;
    try {
      var jsonObject = data.value;
      if (jsonObject.match(simpleObjRE)) {
        jsonObject = losslessJSON.parse(data.value, losslessJsonReviver);
        isJsonParsed = true;
      }
      $('#jqtree_string_div').jsonViewer(jsonObject, {withQuotes: true, withLinks: false});
      if ((uiConfig.jsonViewAsDefault & uiConfig.const.jsonViewString) > 0) dataUIFuncs.onModeJsonButtonClick('#editStringForm')
    } catch (ex) {
      $('#isJson').prop('checked', false);
      $('#jqtree_string_div').text('Text is no valid JSON: ' + ex.message);
    }

    $('#stringValue').val(data.value);
    // a this is json now assume it shall be json if it is object or array, but not for numbers
    if (isJsonParsed && data.value.match(simpleObjRE)) {
      $('#isJson').trigger('click');
    }

    if (!redisReadOnly) {
      $('#editStringForm').off('submit').on('submit', function(event) {
        console.log('saving');
        event.preventDefault();
        var editForm = $(event.target);
        $('#saveKeyButton').attr('disabled', 'disabled').html('<i class="icon-refresh"></i> Saving');

        $.post(editForm.attr('action'), editForm.serialize()
        ).done(function(data2, status) {
          console.log('saved', arguments);
          refreshTree();
          getKeyTree().select_node(0);
        })
        .fail(function(err) {
          console.log('save error', arguments);
          alert('Could not save "' + err.statusText + '"');
        })
        .always(function() {
          setTimeout(function() {
            $('#saveKeyButton').prop('disabled', false).html('Save');
          }, 500);
        });
      });
    }
  });
}

function selectTreeNodeBinary (data) {
  // switch image from 'string' to 'binary', do not know this before really querying the value...
  var tree = getKeyTree();
  tree.set_icon(tree.get_selected(true)[0], 'images/treeBinary.png');

  // only working for smaller data sets, no big binaries by now (everything load into browser)...
  // calc number of 8bit-columns based on current "#body".width, static widths are taken from css classes
  // TODO handle window resize
  var idBody = $('#body');
  data.offset = 0;
  data.columns = Math.floor( (idBody.width() - 70 - 2*20) / 34 / 8 ) * 8;
  data.value = BinaryView.base64DecToArr(data.value);
  data.positions = [];
  for (var i = 0; i < Math.ceil(data.value.length / data.columns); i += 1) {
    data.positions.push( BinaryView.toHex(data.offset + i * data.columns, 8) );
  }

  renderEjs('templates/editBinary.ejs', data, idBody, function() {
    console.log('edit binary template rendered');
    idBody.find('.binaryView-hex').width(22 * data.columns);
    idBody.find('.binaryView-char').width(12 * data.columns);
  });
}

function selectTreeNodeHash (data) {
  renderEjs('templates/editHash.ejs', data, $('#body'), function() {
    console.log('edit hash template rendered');
    if ((uiConfig.jsonViewAsDefault & uiConfig.const.jsonViewHash) > 0) dataUIFuncs.onModeJsonButtonClick()
  });
}

function selectTreeNodeSet (data) {
  renderEjs('templates/editSet.ejs', data, $('#body'), function() {
    console.debug('edit set template rendered');
    if ((uiConfig.jsonViewAsDefault & uiConfig.const.jsonViewSet) > 0) dataUIFuncs.onModeJsonButtonClick()
  });
}

function selectTreeNodeList (data) {
  if (data.items.length > 0) {
    renderEjs('templates/editList.ejs', data, $('#body'), function() {
      console.log('edit list template rendered');
      if ((uiConfig.jsonViewAsDefault & uiConfig.const.jsonViewList) > 0) dataUIFuncs.onModeJsonButtonClick()
    });
  } else {
    alert('Index out of bounds');
  }
}

function selectTreeNodeZSet (data) {
  if (data.items.length > 0) {
    renderEjs('templates/editZSet.ejs', data, $('#body'), function() {
      console.log('rendered zset template');
      if ((uiConfig.jsonViewAsDefault & uiConfig.const.jsonViewZSet) > 0) dataUIFuncs.onModeJsonButtonClick()
    });
  } else {
    alert('Index out of bounds');
  }
}

function selectTreeNodeStream (data) {
  renderEjs('templates/editStream.ejs', data, $('#body'), function() {
    console.log('rendered stream template');
  });
}

function selectTreeNodeReJSON(data) {
  renderEjs('templates/viewReJSON.ejs', data, $('#body'), function() {
    console.log('rendered ReJSON template')
  });
}

function getKeyTree () {
  return $.jstree.reference('#keyTree');
}

function refreshTree () {
  getKeyTree().refresh();
}

function addKey (connectionId, key) {
  if (typeof(connectionId) === 'object') {
    // context menu click
    var node = getKeyTree().get_node(connectionId.reference[0]);
    key = getFullKeyPath(node);
    if (key.length > 0 && !key.endsWith(foldingCharacter)) {
      key = key + foldingCharacter;
    }
    connectionId = getRootConnection(node);
  }
  $('#keyValue').val(key);
  $('#addKeyModal').modal('show');
  setupAddKeyButton(connectionId);
}

function renameKey (connectionId, key) {
  if (typeof(connectionId) === 'object') {
    // context menu click
    var node = getKeyTree().get_node(connectionId.reference[0]);
    key = getFullKeyPath(node);
    connectionId = getRootConnection(node);
  }
  var modal = $('#renameKeyModal');
  modal.find('#currentKeyName').val(key);
  modal.find('#currentKeyNameDisplay').text(key);
  modal.find('#renamedKeyName').val(key);
  modal.find('#renameKeyConnectionId').val(connectionId);
  modal.find('#forceRenameKey').prop('checked', false);
  modal.find('.text-error').remove();
  modal.find('#renamedKeyName').closest('.control-group').removeClass('error');
  modal.modal('show');
}

function exportKey (connectionId, key) {
  var node = null;
  if (typeof (connectionId) === 'object') {
    // context menu click
    node = getKeyTree().get_node(connectionId.reference[0]);
    key = getFullKeyPath(node);
    connectionId = getRootConnection(node);
  }
  $.ajax({
    method: 'GET',
    url: 'tools/forms/export',
    success: function (res) {
      var body = $('#body')
      body.html(res);
      body.find('#connectionExportField option[value="' + connectionId + '"]').attr('selected', true);
      body.find('#exportKeyPrefix').val(key);
    }
  });
}

function deleteKey (connectionId, key) {
  var node = null;
  if (typeof(connectionId) === 'object') {
      // context menu click
      node = getKeyTree().get_node(connectionId.reference[0]);
      key = getFullKeyPath(node);
      connectionId = getRootConnection(node);
  }
  node = getKeyTree().get_node(connectionId);

  // context menu or DEL key pressed on folder item
  if (key.endsWith(foldingCharacter)) {
    deleteBranch(connectionId, key);
    return;
  }
  // delete this specific key only, no wildcard here
  var r